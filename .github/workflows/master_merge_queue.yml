name: Master Merge Queue Test Suite

on:
  # Only want to run this on merge queue, but because GH doesn't allow specifying different required checks
  # for pull request and merge queue, we need to "run" it in pull request, but in the jobs we will just auto pass.
  pull_request:
  #merge_group:
  #  types: [checks_requested]

concurrency:
  # `github.event.number` exists for pull requests, otherwise fall back to SHA for merge queue
  group: ${{ github.workflow }}-${{ github.event.number || github.event.merge_group.base_sha }}
  cancel-in-progress: true

env:
  AWS_ACCESS_KEY_ID: "dummy"
  AWS_SECRET_ACCESS_KEY: "dummy"
  CONTAINER_TOOL: "docker"
  DD_ENV: "ci"
  DD_API_KEY: ${{ secrets.DD_API_KEY }}
  RUST_BACKTRACE: full
  TEST_LOG: vector=debug
  VERBOSE: true
  CI: true
  PROFILE: debug
  # observing issues fetching boringssl via HTTPS in the OSX build, seeing if this helps
  # can be removed when we switch back to the upstream openssl-sys crate
  CARGO_NET_GIT_FETCH_WITH_CLI: true

jobs:

  # This job will always pass and is how we implicitly succeed on PR triggers.
  always:
    runs-on: ubuntu-20.04
    run: |
      echo "OK"

  # This is the entry job which is required for all the actual tests in this workflow.
  # If we don't run this job (such as in a pull request), then by consequence all downstream
  # test jobs are not run. This allows us to not have to check for merge group in each test job.
  changes:
    if: ${{ github.event_name == 'merge_group' }}
    uses: ./.github/workflows/changes.yml
    with:
      base_ref: ${{ github.event.merge_group.base_ref }}
      head_ref: ${{ github.event.merge_group.head_ref }}
    secrets: inherit

  test-cli:
    if: ${{ needs.changes.outputs.source == 'true' }}
    uses: ./.github/workflows/cli.yml
    needs: changes
    secrets: inherit

  test-misc:
    uses: ./.github/workflows/misc.yml
    needs: changes
    secrets: inherit
    if: needs.changes.outputs.source == 'true'

  check-msrv:
    uses: ./.github/workflows/msrv.yml
    needs: changes
    secrets: inherit
    if: needs.changes.outputs.source == 'true'

  check-component-features:
    uses: ./.github/workflows/component_features.yml
    needs: changes
    secrets: inherit
    if: needs.changes.outputs.source == 'true'

  cross-linux:
    uses: ./.github/workflows/cross.yml
    needs: changes
    secrets: inherit
    # We run cross checks when dependencies change to ensure they still build.
    # This helps us avoid adopting dependencies that aren't compatible with other architectures.
    if: needs.changes.outputs.dependencies == 'true'

  unit-mac:
    uses: ./.github/workflows/unit_mac.yml
    needs: changes
    secrets: inherit
    if: needs.changes.outputs.source == 'true'

  unit-windows:
    uses: ./.github/workflows/unit_windows.yml
    needs: changes
    secrets: inherit
    if: needs.changes.outputs.source == 'true'

  install-sh:
    uses: ./.github/workflows/install-sh.yml
    needs: changes
    secrets: inherit
    if: needs.changes.outputs.install == 'true'

  k8s:
    uses: ./.github/workflows/k8s_e2e.yml
    needs: changes
    secrets: inherit
    if: needs.changes.outputs.k8s == 'true'

  # master-merge-queue-check:
  #   name: Master Merge Queue
  #   runs-on: ubuntu-20.04
  #   if: always()
  #   needs:
  #     - changes
  #     - test-cli
  #     - test-misc
  #     - check-msrv
  #     - check-component-features
  #     - cross-linux
  #     - unit-mac
  #     - unit-windows
  #     - install-sh
  #     - k8s
  #   steps:
  #     - name: validate
  #       env:
  #         EVENT_NAME: ${{ github.event_name }}
  #         CHANGES_RESULT: ${{ needs.changes.result }}
  #         CLI_RESULT: ${{ needs.test-cli.result }}
  #         MISC_RESULT: ${{ needs.test-misc.result }}
  #         MSRV_RESULT: ${{ needs.check-msrv.result }}
  #         COMP_RESULT: ${{ needs.check-component-features.result }}
  #         CROSS_RESULT: ${{ needs.cross-linux.result }}
  #         MAC_RESULT: ${{ needs.unit-mac.result }}
  #         WIN_RESULT: ${{ needs.unit-windows.result }}
  #         INS_RESULT: ${{ needs.install-sh.result }}
  #         K8S_RESULT: ${{ needs.k8s.result }}
  #       # If the trigger was a merge group we evaluate the status of each required prerequisite job.
  #       run: |
  #         if [ "$EVENT_NAME" != "merge_group" ] ; then
  #             echo "success"
  #             exit 0
  #         fi
  #         if [[ "$CHANGES_RESULT" == "failure" || "$CLI_RESULT" == "failure"
  #                 || "$MISC_RESULT" == "failure" || "$MSRV_RESULT" == "failure"
  #                 || "$COMP_RESULT" == "failure" || "$CROSS_RESULT" == "failure"
  #                 || "$MAC_RESULT" == "failure"  || "$WIN_RESULT" == "failure"
  #                 || "$INS_RESULT" == "failure"  || "$K8S_RESULT" == "failure" ]] ; then
  #             echo "failed"
  #             exit 1
  #         fi
  #         echo "success"
  #         exit 0
