name: Master Merge Queue Test Suite

on:
  # Only want to run this on merge queue, but because GH doesn't allow specifying different required checks
  # for pull request and merge queue, we need to "run" it in pull request, but in the jobs we will just auto pass.
  pull_request:
  merge_group:
    types: [checks_requested]

env:
  AWS_ACCESS_KEY_ID: "dummy"
  AWS_SECRET_ACCESS_KEY: "dummy"
  CONTAINER_TOOL: "docker"
  DD_ENV: "ci"
  DD_API_KEY: ${{ secrets.DD_API_KEY }}
  RUST_BACKTRACE: full
  TEST_LOG: vector=debug
  VERBOSE: true
  CI: true
  PROFILE: debug
  # observing issues fetching boringssl via HTTPS in the OSX build, seeing if this helps
  # can be removed when we switch back to the upstream openssl-sys crate
  CARGO_NET_GIT_FETCH_WITH_CLI: true

jobs:

  # This is the entry job which is required for all the actual tests in this workflow.
  # If we don't run this job (such as in a pull request), then by consequence all downstream
  # test jobs are not run. This allows us to not have to check for merge group in each test job.
  changes:
    if: ${{ github.event_name == 'merge_group' }}
    uses: ./.github/workflows/changes.yml
    secrets: inherit

  test-cli:
    if: ${{ needs.changes.outputs.source == 'true' }}
    uses: ./.github/workflows/cli.yml
    needs: changes
    secrets: inherit

  # test-misc:
  #   uses: ./.github/workflows/misc.yml
  #   needs: changes
  #   secrets: inherit
  #   if: ${{ needs.changes.outputs.source == 'true' }}

  # check-msrv:
  #   uses: ./.github/workflows/msrv.yml
  #   needs: changes
  #   secrets: inherit
  #   if: ${{ needs.changes.outputs.source == 'true' }}

  # check-component-features:
  #   uses: ./.github/workflows/component_features.yml
  #   needs: changes
  #   secrets: inherit
  #   if: ${{ needs.changes.outputs.source == 'true' }}

  # cross-linux:
  #   uses: ./.github/workflows/cross.yml
  #   needs: changes
  #   secrets: inherit
  #   # We run cross checks when dependencies change to ensure they still build.
  #   # This helps us avoid adopting dependencies that aren't compatible with other architectures.
  #   if: ${{ needs.changes.outputs.dependencies == 'true' }}

  # unit-mac:
  #   uses: ./.github/workflows/unit_mac.yml
  #   needs: changes
  #   secrets: inherit
  #   if: ${{ needs.changes.outputs.source == 'true' }}

  # unit-windows:
  #   uses: ./.github/workflows/unit_windows.yml
  #   needs: changes
  #   secrets: inherit
  #   if: ${{ needs.changes.outputs.source == 'true' }}

  # master-failure:
  #   name: master-failure
  #   if: failure() && github.ref == 'refs/heads/something_clever' # TODO just in case
  #   needs:
  #     - changes
  #     - test-cli
  #     - test-misc
  #     - check-msrv
  #     - check-component-features
  #     - cross-linux
  #     - unit-mac
  #     - unit-windows
  #   runs-on: ubuntu-20.04
  #   steps:
  #   - name: Discord notification
  #     env:
  #       DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
  #     uses: Ilshidur/action-discord@0.3.2
  #     with:
  #       args: "Master merge queue tests failed: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}>"

  master-merge-queue-check:
    name: Master Merge Queue
    runs-on: ubuntu-20.04
    if: always()
    needs:
      - changes
      - test-cli
    steps:
      # - uses: actions/checkout@v2
      # - name: Succeed if pull_request
      #   if: ${{ github.event_name == 'pull_request' }}
      #   uses: Sibz/github-status-action@v1
      #   with:
      #     authToken: ${{secrets.GITHUB_TOKEN}}
      #     context: 'Master Merge Queue'
      #     description: 'Passed'
      #     state: 'success'
      #     sha: ${{github.event.pull_request.head.sha || github.sha}}

      # if the trigger was a merge group we evaluate the status of each required prerequisite job. Otherwise, return success.
      - name: validate
        #if: always()
        env:
          EVENT_NAME: ${{ github.event_name }}
          CHANGES_RESULT: ${{ needs.changes.result }}
          CLI_RESULT: ${{ needs.test-cli.result }}
        run: |
          [ "$EVENT_NAME" != "merge_group" ] && echo "Success" && exit 0
          [[ "$CHANGES_RESULT" == "failure" || "$CLI_RESULT" == "failure" ]]
            && echo "Failed" && exit 1 || echo "Success"
